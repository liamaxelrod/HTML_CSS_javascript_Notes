<!-- ⚡ Master Skeleton Template for Coding Notes -->

<template> <!-- ⚡Coding Language: Example Topic -->

  <!-- 📝 GLOBAL RULES (do not render in final notes):
       1. Code must be in ONE <code> block per section. Use <span class="C#"> for highlights.
       2. Indentation is done with &nbsp;&nbsp; inside <code>.
       3. Each color (C1–C10) links across: Code ↔ Example Outputs (dot d#) ↔ Explanation.
       4. If the language requires an entry point (e.g., Rust’s fn main, C’s int main), always explain it.
       5. Voice: always beginner-friendly, clear, step-by-step.
       6. Section order is fixed: Code → Example Outputs → Explanation → Notes → Concept & Spirit.
  -->

  <div class="bubble">

    <!-- 1. CODE BLOCKS -->
    <h3>⚡Topic Title: Short description of the programming concept</h3>
    <div class="code_block">
      <code>
        <!-- ⚡Section 1 -->
        // ⚡Section title <br>
        <span class="C1">code line 1</span><br>
        <span class="C1">&nbsp;&nbsp;indented line</span><br><br>

        <!-- ⚡Section 2 -->
        // ⚡Section title <br>
        <span class="C2">code line 2</span><br><br>

        <!-- ⚡Section 3 -->
        // ⚡Section title <br>
        <span class="C3">code line 3</span><br>
      </code>
    </div>

    <!-- 2. EXAMPLE OUTPUTS -->
    <h3>Example (Outputs):</h3>
    <div class="example">
      <span class="dot d1"></span><span> &rarr; Output or explanation tied to C1</span><br>
      <span class="dot d2"></span><span> &rarr; Output or explanation tied to C2</span><br>
      <span class="dot d3"></span><span> &rarr; Output or explanation tied to C3</span><br>
    </div>

    <!-- 3.1 EXPLANATION -->
    <h3>Explanation:</h3>
    <div class="explanation">
      <!-- 📝 Section-specific rules for Explanation:
            - Include beginner-friendly analogies
            - Include memory/lifetime hints where relevant
            - Compare with similar language features if applicable
            - Include practical examples of transformations if relevant
      -->
      <span class="C1"><code>Word/code</code></span><span> – Explanation tied to C1, written for beginners.</span><br>
      <span class="C2"><code>Word/code</code></span><span> – Explanation tied to C2.</span><br>
      <span class="C3"><code>Word/code</code></span><span> – Explanation tied to C3.</span><br><br>

      <!-- 3.2 NOTES -->
      <h3>Notes:</h3>
      <span>- ⚡Best practices, common pitfalls, or differences from other languages.</span><br>
      <span>- ⚡Special mention if the language requires an entry point (e.g., Rust’s fn main).</span><br><br>

      <!-- 3.3 CONCEPT & SPIRIT -->
      <h3>Concept & Spirit:</h3>
      <!-- 📝 Section-specific rules for Concept & Spirit:
            - Focus on the philosophy of the specific feature/topic, not just the language
            - Explain why this syntax/feature exists
            - Include mindset/reasoning for coding safely and effectively with this feature
      -->
      <span>- ⚡Why this language feature exists and how it shapes coding mindset.</span><br>
      <span>- ⚡Big-picture lesson for beginners: how to think about and use this feature effectively and safely.</span>
    </div>

  </div>
</template>
<!-- Shortly I will give you instructions on the new template I want to make -->









<!--
📝 CROSS-REFERENCE MARKER:
  If this skeleton is pasted back with this marker intact,
  compare it against the last polished template I made,
  find differences, and update the skeleton accordingly.
-->